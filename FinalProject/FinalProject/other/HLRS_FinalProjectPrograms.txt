-- linked server
GO

sp_dropserver 'TITAN_SUDDRETH', 'droplogins'; 


USE MASTER
GO
EXEC sp_addlinkedserver
@server='TITAN_SUDDRETH',
@srvproduct='',
@provider='MSDASQL',
@provstr='DRIVER={SQL Server};SERVER=titan.cs.weber.edu,10433;UID=IanSuddreth;PWD=Ragnarok#28;',
@catalog='SUDDRETH_FARMS' --Note I created this user for my hotel database.

Exec sp_serveroption 'TITAN_SUDDRETH', 'data access', 'true'
Exec sp_serveroption 'TITAN_SUDDRETH', 'rpc', 'true'--enables from the REMOTE to LOCAL server
Exec sp_serveroption 'TITAN_SUDDRETH', 'rpc out', 'true' -- enables from the LOCAL to REMOTE server
Exec sp_serveroption 'TITAN_SUDDRETH', 'collation compatible', 'true'

-- 

Exec sp_addlinkedsrvlogin 'TITAN_SUDDRETH', 'true'

Exec sp_addlinkedsrvlogin
@rmtsrvname='TITAN_SUDDRETH', --this is the name of the linked server
@useself='false',--True means that sql server logins are used, false means that the rmtuser and rmtpassword are used
@rmtuser='IanSuddreth', --name of the remote user
@rmtpassword='Ragnarok#28' --remote user password

 
-- triggers

USE SUDDRETH_HLRS

--tr_UpdateShelfDescription
GO

IF OBJECT_ID ('tr_UpdateShelfDescription', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateShelfDescription;
    
GO 

Create Trigger tr_UpdateShelfDescription  ON Shelf
INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @Description varchar(100)
	DECLARE @HotelID smallint
	SET @HotelID = (SELECT i.HotelID FROM inserted i)

	SET @Description = (SELECT t.HotelName FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT * FROM Hotel') t  WHERE t.HotelID = @HotelID) + ' ' + (SELECT i.ShelfLocation FROM inserted i)

	INSERT INTO Shelf SELECT i.HotelID, i.ShelfName, i.ShelfLocation, @Description FROM inserted i

END

--SELECT * FROM Shelf

--tr_UpdateStatus
GO

IF OBJECT_ID ('tr_UpdateStatus', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateStatus;
    
GO 

Create Trigger tr_UpdateStatus ON Rental
AFTER UPDATE, INSERT 
AS 

BEGIN

	IF(SELECT RentalStatus FROM inserted) = 'A'
		BEGIN
		UPDATE Book SET BookStatus = 'O'
		WHERE BookID =
		(
		SELECT r.BookID
		FROM Rental r
		JOIN inserted i
		ON i.RentalID = r.RentalID
		)
	END

	IF(SELECT RentalStatus FROM inserted) = 'C'
		BEGIN
		UPDATE Book SET BookStatus = 'A'
		WHERE BookID =
		(
		SELECT r.BookID
		FROM Rental r
		JOIN inserted i
		ON i.RentalID = r.RentalID
		)
	END

END

--SELECT * FROM Book

--tr_UpdateCheckIn
GO

IF OBJECT_ID ('tr_UpdateCheckIn', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateCheckIn;
    
GO 

Create Trigger tr_UpdateCheckIn ON Rental
AFTER UPDATE 
AS 

IF UPDATE(RentalCheckIn)
BEGIN

	UPDATE Rental SET RentalStatus = 'C'
	WHERE RentalID =
	(
	SELECT r.RentalID
	FROM Rental r
	JOIN (SELECT i.RentalID FROM inserted i) i
	ON i.RentalID = r.RentalID
	)
	UPDATE Rental SET RentalTotal = dbo.calculateCost((SELECT i.RentalID FROM inserted i)) WHERE RentalID = (SELECT i.RentalID FROM inserted i)
END

--tr_BookMustExist
GO

IF OBJECT_ID ('tr_BookMustExist', 'TR') IS NOT NULL  
   DROP TRIGGER tr_BookMustExist;
    
GO 

Create Trigger tr_BookMustExist  ON Rental
AFTER INSERT, UPDATE 
AS 
DECLARE @BookID smallint 
IF Exists ( SELECT * 
            FROM Inserted i 
			LEFT JOIN Book b ON i.BookID = b.BookID
			WHERE b.BookID is NULL ) 
BEGIN
SELECT @BookID = (SELECT BookID FROM Inserted) 
RAISERROR ('That book doesn''t Exist!',16,1,@BookID) 
ROLLBACK 
END

--INSERT INTO Rental(BookID,FolioID,RentalCheckOut,RentalNights,RentalStatus) VALUES (1000,1,'8/1/2016',5,'A')
--SELECT * FROM Rental
--sprocs

--sp_UpdateRental
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_UpdateRental')
	DROP PROCEDURE sp_UpdateRental;

GO 

CREATE PROCEDURE sp_UpdateRental
    @RentalID smallint OUTPUT
  , @RentalCheckIn smalldatetime

AS 
BEGIN

	
	DECLARE @FolioID smallint
	DECLARE @BillingCategoryID smallint
	DECLARE @BIllingDescription char(30)
	DECLARE @BillingAmount smallmoney
	DECLARE @BillingItemQty tinyint
	DECLARE @BillingItemDate date

	UPDATE Rental SET RentalCheckIn = @RentalCheckIn WHERE RentalID = @RentalID

	SET @FolioID = (SELECT FolioID FROM Rental WHERE RentalID = @RentalID)
	SET @BillingCategoryID = 3
	SET @BIllingDescription = 'Book'
	SET @BillingAmount = (SELECT RentalTotal FROM Rental WHERE RentalID = @RentalID)
	SET @BillingItemQty = 1
	SET @BillingItemDate = CONVERT(date,GETDATE(),1)

	IF (SELECT RentalStatus FROM Rental WHERE RentalID = @RentalID) = 'C'
	BEGIN
		
		INSERT OPENQUERY (TITAN_SUDDRETH, 'SELECT FolioID, BillingCategoryID, BIllingDescription, BillingAmount, BillingItemQty, BillingItemDate FROM Billing')
		VALUES(@FolioID, @BillingCategoryID, @BIllingDescription, @BillingAmount, @BillingItemQty, @BillingItemDate)

	END
	RETURN
END

--EXEC sp_UpdateRental
--    @RentalID=1
--  , @RentalCheckIn ='8/5/2016'

--SELECT * FROM Book
--SELECT * FROM Rental
--SELECT * FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT * FROM Billing')

--sp_GetBooks
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetBooks')
	DROP PROCEDURE sp_GetBooks;

GO 

CREATE PROCEDURE sp_GetBooks
(
	@ShelfID smallint OUTPUT
)

AS 
BEGIN

	SELECT b.BookName, b.BookStatus
	FROM Book b
	JOIN Shelf s ON s.ShelfID = b.ShelfID
	WHERE s.ShelfID = @ShelfID
	AND b.BookStatus = 'A'

	RETURN
END

--EXEC sp_GetBooks
--	@ShelfID = 1

--sp_GetAuthor
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetAuthor')
	DROP PROCEDURE sp_GetAuthor;

GO 

CREATE PROCEDURE sp_GetAuthor
(
	@PublisherID smallint OUTPUT
)
AS 
BEGIN

	SELECT DISTINCT p.PublisherName, a.AuthorName
	FROM Author a
	JOIN BookAuthor ba ON ba.AuthorID = a.AuthorID 
	JOIN Book b ON b.BookID = ba.BookID
	JOIN Publisher p ON p.PublisherID = b.PublisherID
	WHERE b.PublisherID = @PublisherID

	RETURN
END

--EXEC sp_GetAuthor
--	@PublisherID = 1

--sp_InsertBook
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertBook')
	DROP PROCEDURE sp_InsertBook;

GO 


CREATE PROCEDURE sp_InsertBook
    @PublisherID smallint OUTPUT
  , @ShelfID smallint
  , @BookName nvarchar(50)
  , @AuthorName nvarchar(50)
  , @SecondAuthorName nvarchar(50) NULL
  , @ThirdAuthorName nvarchar(50) NULL

AS 
BEGIN
	DECLARE @AuthorID smallint
	DECLARE @BookID smallint

	INSERT INTO Book(PublisherID, ShelfID, BookName, BookCost, BookStatus) 
	VALUES (@PublisherID,@ShelfID,@BookName,5,'A');

	SET @BookID = @@IDENTITY

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @AuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@AuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @AuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 1)

	IF @SecondAuthorName IS NOT NULL
	BEGIN
		IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @SecondAuthorName)
		BEGIN 

		 INSERT INTO Author(AuthorName) VALUES(@SecondAuthorName)

		END

		SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @SecondAuthorName) 

		INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 2)
	END

	IF @ThirdAuthorName IS NOT NULL
	BEGIN
		IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @ThirdAuthorName)
		BEGIN 

		 INSERT INTO Author(AuthorName) VALUES(@ThirdAuthorName)

		END

		SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @ThirdAuthorName) 

		INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 3)
	END
END

-- User defined functions

-- dbo.showCheckedOut
IF OBJECT_ID (N'dbo.showCheckedOut', N'FN') IS NOT NULL
DROP FUNCTION dbo.showCheckedOut;

GO

CREATE FUNCTION dbo.showCheckedOut
       (
       @HotelID smallint 
       )
RETURNS @CheckedOut TABLE
(
	Due varchar(200) NOT NULL 
)
AS
BEGIN
	DECLARE @BookName	nvarchar(50)
	DECLARE @Date		smalldatetime

	DECLARE CheckOutCursor CURSOR FOR
	SELECT b.BookName, DATEADD(day, r.RentalNights, r.RentalCheckOut) 
	FROM Book b
	JOIN Shelf s ON s.ShelfID = b.ShelfID
	JOIN OPENQUERY (TITAN_SUDDRETH, 'SELECT * FROM Hotel') t ON t.HotelID = s.HotelID
	JOIN Rental r ON r.BookID = b.BookID
	WHERE s.HotelID = @HotelID

	OPEN CheckOutCursor

	-- Fetch First Time 
	FETCH NEXT FROM CheckOutCursor 
	INTO @BookName, @Date
	WHILE @@FETCH_STATUS = 0 
				BEGIN 

					INSERT INTO @CheckedOut SELECT ( @BookName + ' DUE: ' + CONVERT(varchar(10),@Date) ) 
					 
					-- Inner Fetch 
					FETCH NEXT FROM CheckOutCursor 
					INTO @BookName, @Date
				END
			
	CLOSE CheckOutCursor DEALLOCATE CheckOutCursor

	RETURN 
END

GO

--SELECT *  FROM dbo.showCheckedOut(2100)


-- dbo.printAuthors
IF OBJECT_ID (N'dbo.printAuthors', N'FN') IS NOT NULL
DROP FUNCTION dbo.printAuthors;

GO

CREATE FUNCTION dbo.printAuthors
       (
       @BookID smallint 
       )
RETURNS @AuthorsOfBook TABLE
(
	AuthorsOfBook varchar(200) NOT NULL 
)
AS
BEGIN
	DECLARE @AuthorName	nvarchar(50)

	INSERT INTO @AuthorsOfBook SELECT BookName FROM Book WHERE BookID = @BookID
	INSERT INTO @AuthorsOfBook SELECT '******************************'

	DECLARE AuthorCursor CURSOR FOR
	SELECT a.AuthorName
	FROM Author a
	JOIN BookAuthor ba ON ba.AuthorID = a.AuthorID
	JOIN Book b ON b.BookID = ba.BookID
	WHERE b.BookID = @BookID
	ORDER BY ba.BookAuthorOrdinal


	OPEN AuthorCursor

	-- Fetch First Time 
	FETCH NEXT FROM AuthorCursor 
	INTO @AuthorName
	WHILE @@FETCH_STATUS = 0 
				BEGIN 

					INSERT INTO @AuthorsOfBook SELECT ( @AuthorName ) 
					 
					-- Inner Fetch 
					FETCH NEXT FROM AuthorCursor 
					INTO @AuthorName
				END
			
	CLOSE AuthorCursor DEALLOCATE AuthorCursor

	RETURN 

END

GO


--SELECT *  FROM dbo.printAuthors(11) 


-- dbo.getQuote
IF OBJECT_ID (N'dbo.getQuote', N'FN') IS NOT NULL
DROP FUNCTION dbo.getQuote;

GO

CREATE FUNCTION dbo.getQuote
       (
       @AuthorID smallint 
       )
RETURNS TABLE
AS
RETURN
(
	SELECT b.BookName, q.QuoteDescription 
	FROM Quote q
	JOIN Book b ON b.BookID = q.BookID
	JOIN BookAuthor ba ON ba.BookID = b.BookID
	JOIN Author a ON a.AuthorID = ba.AuthorID
	WHERE a.AuthorID = @AuthorID
)
GO

--SELECT * FROM dbo.getQuote(2)

--HLRS_FinalProjectCreate
--Ian Suddreth 8/9/2016

-- dbo.calculateCost
IF OBJECT_ID (N'dbo.calculateCost', N'FN') IS NOT NULL
DROP FUNCTION dbo.calculateCost;

GO

CREATE FUNCTION dbo.calculateCost
       (
       @RentalID smallint 
       )
RETURNS smallmoney
AS
BEGIN
	DECLARE @Total smallmoney
	DECLARE @Cost smallmoney
	DECLARE @BookID smallint
	DECLARE @Nights tinyint
	DECLARE @LateFee smallmoney
	DECLARE @Tax decimal(6,4)

	SET @Tax = (SELECT t.SalesTaxRate FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT tr.SalesTaxRate, h.HotelID FROM TaxRate tr JOIN Hotel h ON h.TaxLocationID = tr.TaxLocationID') t WHERE t.HotelID = 2100)

	SET @BookID = (SELECT BookID FROM Rental WHERE RentalID = @RentalID)
	SET @Cost = (SELECT BookCost FROM Book WHERE BookID = @BookID)
	SET @Nights = (SELECT RentalNights FROM Rental WHERE RentalID = @RentalID)
	SET @LateFee = 0
	
	IF DATEDIFF(day,DATEADD(day,5,(SELECT RentalCheckOut FROM Rental WHERE RentalID = @RentalID)) , (SELECT RentalCheckIn FROM Rental WHERE RentalID = @RentalID)) > 0
		BEGIN
			SET @LateFee = 5
		END
	
	SET @Total = ROUND(((@Cost*@Nights) + @LateFee) + (((@Cost*@Nights) + @LateFee) * (@Tax/100)),2)

	RETURN @Total
END