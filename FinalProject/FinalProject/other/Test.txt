--HLRS_FinalProjectCreate
--Ian Suddreth 7/27/2016


USE Master

IF EXISTS (SELECT * FROM sys.databases WHERE name='SUDDRETH_HLRS')
DROP DATABASE SUDDRETH_HLRS

GO

CREATE DATABASE SUDDRETH_HLRS

ON PRIMARY

(
NAME = 'SUDDRETH_HLRS',
FILENAME = 'C:\Stage\SUDDRETH_HLRS.mdf',
SIZE = 10MB,
MAXSIZE = 50MB,
FILEGROWTH = 10%
)

LOG ON

(
NAME = 'SUDDRETH_HLRS_LOG',
FILENAME = 'C:\Stage\SUDDRETH_HLRS.ldf',
SIZE = 2500KB, --10% for Read, otherwise 25%
MAXSIZE = 12500KB, -- 25% of 10MB
FILEGROWTH = 1250KB -- 25% of 5MB
)

GO

-- With the database now created, switch to it and begin creating the individual 
-- tables for the database

USE SUDDRETH_HLRS


CREATE TABLE Quote
(
QuoteID				smallint		NOT NULL	IDENTITY(1,1),
BookID				smallint		NOT NULL,
QuoteDescription	varchar(200)		NOT NULL,
QuoteComment		varchar(200)		NULL
)

CREATE TABLE BookAuthor
(
BookAuthorID		smallint	NOT NULL	IDENTITY(1,1),
BookID				smallint	NOT NULL,
AuthorID			smallint	NOT NULL,
BookAuthorOrdinal	tinyint		NULL
)

CREATE TABLE Author
(
AuthorID		smallint		NOT NULL		IDENTITY(1,1),
AuthorName		nvarchar(50)	NOT NULL,
AuthorWebsite	varchar(100)	NULL,
AuthorEmail		varchar(50)		NULL
)

CREATE TABLE Rental
(
RentalID			smallint		NOT NULL	IDENTITY(1,1),
BookID				smallint		NULL,
FolioID				smallint		NOT NULL,
RentalCheckOut		smalldatetime	NOT NULL,
RentalCheckIn		smalldatetime	NULL,
RentalNights		tinyint			NOT NULL,
RentalStatus		char(1)			NOT NULL,
RentalTotal			smallmoney		NULL
)

CREATE TABLE Book
(
BookID				smallint		NOT NULL		IDENTITY(1,1),
PublisherID			smallint		NOT NULL,
ShelfID				smallint		NULL,
BookName			nvarchar(50)		NOT NULL,
BookDescription		varchar(200)	NULL,
BookCost			smallmoney		NOT NULL,
BookStatus			char(1)			NOT NULL
)

CREATE TABLE Shelf
(
ShelfID				smallint		NOT NULL		IDENTITY(1,1),
HotelID				smallint		NOT NULL,
ShelfName			varchar(20)		NOT NULL,
ShelfLocation		varchar(20)		NOT NULL,
ShelfDescription	varchar(50)		NULL
)

CREATE TABLE Publisher
(
PublisherID				smallint		NOT NULL		IDENTITY(1,1),
PublisherName			varchar(50)		NOT NULL,
PublisherPhone			varchar(20)		NULL
)



-- Ensure that the script to create tables has finished
-- before altering tables and adding in constraints

GO

-- Alter each of the tables to add Primary keys

ALTER TABLE Quote
	ADD CONSTRAINT PK_QuoteID
	PRIMARY KEY (QuoteID)


ALTER TABLE BookAuthor
	ADD CONSTRAINT PK_BookAuthorID
	PRIMARY KEY (BookAuthorID)


ALTER TABLE Author
	ADD CONSTRAINT PK_AuthorID
	PRIMARY KEY (AuthorID)


ALTER TABLE Rental
	ADD CONSTRAINT PK_RentalID
	PRIMARY KEY (RentalID)


ALTER TABLE Book
	ADD CONSTRAINT PK_BookID
	PRIMARY KEY (BookID)


ALTER TABLE Shelf
	ADD CONSTRAINT PK_ShelfID
	PRIMARY KEY (ShelfID)


ALTER TABLE Publisher
	ADD CONSTRAINT PK_PublisherID
	PRIMARY KEY (PublisherID)


	
-- Ensure PKs have been created before moving on to FKs

GO

-- Alter tables to set up foreign keys

ALTER TABLE Quote
	ADD CONSTRAINT FK_QuoteBook
	FOREIGN KEY (BookID) REFERENCES Book (BookID)
	ON UPDATE Cascade
	ON DELETE Cascade


ALTER TABLE Book
	ADD CONSTRAINT FK_BookPublisher
	FOREIGN KEY (PublisherID) REFERENCES Publisher (PublisherID)
	ON UPDATE Cascade
	ON DELETE Cascade,

	CONSTRAINT FK_BookShelf
	FOREIGN KEY (ShelfID) REFERENCES Shelf (ShelfID)
	ON UPDATE Cascade
	ON DELETE Cascade



ALTER TABLE BookAuthor
	ADD CONSTRAINT FK_BookAuthorBook
	FOREIGN KEY (BookID) REFERENCES Book (BookID)
	ON UPDATE Cascade
	ON DELETE Cascade,
	
	CONSTRAINT FK_BookAuthorAuthor
	FOREIGN KEY (AuthorID) REFERENCES Author (AuthorID)
	ON UPDATE Cascade
	ON DELETE Cascade


-- Alter tables to set up constraints

ALTER TABLE Rental
	ADD CONSTRAINT CK_RentalStatus
	CHECK (RentalStatus IN ('R','A','C','X'))


ALTER TABLE Book
	ADD CONSTRAINT CK_BookStatus
	CHECK (BookStatus IN ('R','A','O'))

	
-- linked server
GO

sp_dropserver 'TITAN_SUDDRETH', 'droplogins'; 


USE MASTER
GO
EXEC sp_addlinkedserver
@server='TITAN_SUDDRETH',
@srvproduct='',
@provider='MSDASQL',
@provstr='DRIVER={SQL Server};SERVER=titan.cs.weber.edu,10433;UID=IanSuddreth;PWD=Ragnarok#28;',
@catalog='SUDDRETH_FARMS' --Note I created this user for my hotel database.

Exec sp_serveroption 'TITAN_SUDDRETH', 'data access', 'true'
Exec sp_serveroption 'TITAN_SUDDRETH', 'rpc', 'true'--enables from the REMOTE to LOCAL server
Exec sp_serveroption 'TITAN_SUDDRETH', 'rpc out', 'true' -- enables from the LOCAL to REMOTE server
Exec sp_serveroption 'TITAN_SUDDRETH', 'collation compatible', 'true'

-- 

Exec sp_addlinkedsrvlogin 'TITAN_SUDDRETH', 'true'

Exec sp_addlinkedsrvlogin
@rmtsrvname='TITAN_SUDDRETH', --this is the name of the linked server
@useself='false',--True means that sql server logins are used, false means that the rmtuser and rmtpassword are used
@rmtuser='IanSuddreth', --name of the remote user
@rmtpassword='Ragnarok#28' --remote user password

 
-- triggers

USE SUDDRETH_HLRS

--tr_UpdateShelfDescription
GO

IF OBJECT_ID ('tr_UpdateShelfDescription', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateShelfDescription;
    
GO 

Create Trigger tr_UpdateShelfDescription  ON Shelf
INSTEAD OF INSERT
AS 
BEGIN
	DECLARE @Description varchar(100)
	DECLARE @HotelID smallint
	SET @HotelID = (SELECT i.HotelID FROM inserted i)

	SET @Description = (SELECT t.HotelName FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT * FROM Hotel') t  WHERE t.HotelID = @HotelID) + ' ' + (SELECT i.ShelfLocation FROM inserted i)

	INSERT INTO Shelf SELECT i.HotelID, i.ShelfName, i.ShelfLocation, @Description FROM inserted i

END

--tr_UpdateStatus
GO

IF OBJECT_ID ('tr_UpdateStatus', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateStatus;
    
GO 

Create Trigger tr_UpdateStatus ON Rental
AFTER UPDATE, INSERT 
AS 

BEGIN

	IF(SELECT RentalStatus FROM inserted) = 'A'
		BEGIN
		UPDATE Book SET BookStatus = 'O'
		WHERE BookID =
		(
		SELECT r.BookID
		FROM Rental r
		JOIN inserted i
		ON i.RentalID = r.RentalID
		)
	END

	IF(SELECT RentalStatus FROM inserted) = 'C'
		BEGIN
		UPDATE Book SET BookStatus = 'A'
		WHERE BookID =
		(
		SELECT r.BookID
		FROM Rental r
		JOIN inserted i
		ON i.RentalID = r.RentalID
		)
	END

END

--tr_UpdateCheckIn
GO

IF OBJECT_ID ('tr_UpdateCheckIn', 'TR') IS NOT NULL  
   DROP TRIGGER tr_UpdateCheckIn;
    
GO 

Create Trigger tr_UpdateCheckIn ON Rental
AFTER UPDATE 
AS 

IF UPDATE(RentalCheckIn)
BEGIN

	UPDATE Rental SET RentalStatus = 'C'
	WHERE RentalID =
	(
	SELECT r.RentalID
	FROM Rental r
	JOIN (SELECT i.RentalID FROM inserted i) i
	ON i.RentalID = r.RentalID
	)
	UPDATE Rental SET RentalTotal = dbo.calculateCost((SELECT i.RentalID FROM inserted i)) WHERE RentalID = (SELECT i.RentalID FROM inserted i)
END

--tr_BookMustExist
GO

IF OBJECT_ID ('tr_BookMustExist', 'TR') IS NOT NULL  
   DROP TRIGGER tr_BookMustExist;
    
GO 

Create Trigger tr_BookMustExist  ON Rental
AFTER INSERT, UPDATE 
AS 
DECLARE @BookID smallint 
IF Exists ( SELECT * 
            FROM Inserted i 
			LEFT JOIN Book b ON i.BookID = b.BookID
			WHERE b.BookID is NULL ) 
BEGIN
SELECT @BookID = (SELECT BookID FROM Inserted) 
RAISERROR ('Error',16,1,@BookID) 
ROLLBACK 
END


--sprocs

--sp_UpdateRental
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_UpdateRental')
	DROP PROCEDURE sp_UpdateRental;

GO 

CREATE PROCEDURE sp_UpdateRental
    @RentalID smallint OUTPUT
  , @RentalCheckIn smalldatetime

AS 
BEGIN

	
	DECLARE @FolioID smallint
	DECLARE @BillingCategoryID smallint
	DECLARE @BIllingDescription char(30)
	DECLARE @BillingAmount smallmoney
	DECLARE @BillingItemQty tinyint
	DECLARE @BillingItemDate date

	UPDATE Rental SET RentalCheckIn = @RentalCheckIn WHERE RentalID = @RentalID

	SET @FolioID = (SELECT FolioID FROM Rental WHERE RentalID = @RentalID)
	SET @BillingCategoryID = 3
	SET @BIllingDescription = 'Book'
	SET @BillingAmount = (SELECT RentalTotal FROM Rental WHERE RentalID = @RentalID)
	SET @BillingItemQty = 1
	SET @BillingItemDate = CONVERT(date,GETDATE(),1)

	IF (SELECT RentalStatus FROM Rental WHERE RentalID = @RentalID) = 'C'
	BEGIN
		
		INSERT OPENQUERY (TITAN_SUDDRETH, 'SELECT FolioID, BillingCategoryID, BIllingDescription, BillingAmount, BillingItemQty, BillingItemDate FROM Billing')
		VALUES(@FolioID, @BillingCategoryID, @BIllingDescription, @BillingAmount, @BillingItemQty, @BillingItemDate)

	END

END


--sp_GetBooks
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetBooks')
	DROP PROCEDURE sp_GetBooks;

GO 

CREATE PROCEDURE sp_GetBooks
(
	@ShelfID smallint OUTPUT
)

AS 
BEGIN

	SELECT b.BookName, b.BookStatus
	FROM Book b
	JOIN Shelf s ON s.ShelfID = b.ShelfID
	WHERE s.ShelfID = @ShelfID
	AND b.BookStatus = 'A'

END


--sp_GetAuthor
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetAuthor')
	DROP PROCEDURE sp_GetAuthor;

GO 

CREATE PROCEDURE sp_GetAuthor
(
	@PublisherID smallint OUTPUT
)
AS 
BEGIN

	SELECT DISTINCT p.PublisherName, a.AuthorName
	FROM Author a
	JOIN BookAuthor ba ON ba.AuthorID = a.AuthorID 
	JOIN Book b ON b.BookID = ba.BookID
	JOIN Publisher p ON p.PublisherID = b.PublisherID
	WHERE b.PublisherID = @PublisherID

END

--sp_InsertBook
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertBook')
	DROP PROCEDURE sp_InsertBook;

GO 

CREATE PROCEDURE sp_InsertBook
    @PublisherID smallint OUTPUT
  , @ShelfID smallint
  , @BookName nvarchar(50)
  , @AuthorName nvarchar(50)

AS 
BEGIN
	DECLARE @AuthorID smallint
	DECLARE @BookID smallint

	INSERT INTO Book(PublisherID, ShelfID, BookName, BookCost, BookStatus) 
	VALUES (@PublisherID,@ShelfID,@BookName,5,'A');

	SET @BookID = @@IDENTITY

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @AuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@AuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @AuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID) VALUES (@BookID,@AuthorID)

END


--sp_InsertBook2
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertBook2')
	DROP PROCEDURE sp_InsertBook2;

GO 

CREATE PROCEDURE sp_InsertBook2
    @PublisherID smallint OUTPUT
  , @ShelfID smallint
  , @BookName nvarchar(50)
  , @FirstAuthorName nvarchar(50)
  , @SecondAuthorName nvarchar(50)

AS 
BEGIN
	DECLARE @AuthorID smallint
	DECLARE @BookID smallint

	INSERT INTO Book(PublisherID, ShelfID, BookName, BookCost, BookStatus) 
	VALUES (@PublisherID,@ShelfID,@BookName,5,'A');

	SET @BookID = @@IDENTITY

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @FirstAuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@FirstAuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @FirstAuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 1)

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @SecondAuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@SecondAuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @SecondAuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 2)

END

--sp_InsertBook3
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertBook3')
	DROP PROCEDURE sp_InsertBook3;

GO 


CREATE PROCEDURE sp_InsertBook3
    @PublisherID smallint OUTPUT
  , @ShelfID smallint
  , @BookName nvarchar(50)
  , @FirstAuthorName nvarchar(50)
  , @SecondAuthorName nvarchar(50)
  , @ThirdAuthorName nvarchar(50)

AS 
BEGIN
	DECLARE @AuthorID smallint
	DECLARE @BookID smallint

	INSERT INTO Book(PublisherID, ShelfID, BookName, BookCost, BookStatus) 
	VALUES (@PublisherID,@ShelfID,@BookName,5,'A');

	SET @BookID = @@IDENTITY

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @FirstAuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@FirstAuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @FirstAuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 1)

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @SecondAuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@SecondAuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @SecondAuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 2)

	IF NOT EXISTS (SELECT * FROM Author WHERE AuthorName = @ThirdAuthorName)
	BEGIN 

	 INSERT INTO Author(AuthorName) VALUES(@ThirdAuthorName)

	END

	SET @AuthorID = (SELECT AuthorID FROM Author WHERE AuthorName = @ThirdAuthorName) 

	INSERT INTO BookAuthor(BookID, AuthorID, BookAuthorOrdinal) VALUES (@BookID,@AuthorID, 3)

END

-- User defined functions

-- dbo.showCheckedOut
IF OBJECT_ID (N'dbo.showCheckedOut', N'FN') IS NOT NULL
DROP FUNCTION dbo.showCheckedOut;

GO

CREATE FUNCTION dbo.showCheckedOut
       (
       @HotelID smallint 
       )
RETURNS @CheckedOut TABLE
(
	Due varchar(200) NOT NULL 
)
AS
BEGIN
	DECLARE @BookName	nvarchar(50)
	DECLARE @Date		smalldatetime

	DECLARE CheckOutCursor CURSOR FOR
	SELECT b.BookName, DATEADD(day, r.RentalNights, r.RentalCheckOut) 
	FROM Book b
	JOIN Shelf s ON s.ShelfID = b.ShelfID
	JOIN Hotel h ON h.HotelID = s.HotelID
	JOIN Rental r ON r.BookID = b.BookID
	WHERE h.HotelID = @HotelID


	OPEN CheckOutCursor

	-- Fetch First Time 
	FETCH NEXT FROM CheckOutCursor 
	INTO @BookName, @Date
	WHILE @@FETCH_STATUS = 0 
				BEGIN 

					INSERT INTO @CheckedOut SELECT ( @BookName + ' DUE: ' + CONVERT(varchar(10),@Date) ) 
					 
					-- Inner Fetch 
					FETCH NEXT FROM CheckOutCursor 
					INTO @BookName, @Date
				END
			
	CLOSE CheckOutCursor DEALLOCATE CheckOutCursor

	RETURN 
END

GO


-- dbo.printAuthors
IF OBJECT_ID (N'dbo.printAuthors', N'FN') IS NOT NULL
DROP FUNCTION dbo.printAuthors;

GO

CREATE FUNCTION dbo.printAuthors
       (
       @BookID smallint 
       )
RETURNS @AuthorsOfBook TABLE
(
	AuthorsOfBook varchar(200) NOT NULL 
)
AS
BEGIN
	DECLARE @AuthorName	nvarchar(50)

	INSERT INTO @AuthorsOfBook SELECT BookName FROM Book WHERE BookID = @BookID
	INSERT INTO @AuthorsOfBook SELECT '******************************'

	DECLARE AuthorCursor CURSOR FOR
	SELECT a.AuthorName
	FROM Author a
	JOIN BookAuthor ba ON ba.AuthorID = a.AuthorID
	JOIN Book b ON b.BookID = ba.BookID
	WHERE b.BookID = @BookID
	ORDER BY ba.BookAuthorOrdinal


	OPEN AuthorCursor

	-- Fetch First Time 
	FETCH NEXT FROM AuthorCursor 
	INTO @AuthorName
	WHILE @@FETCH_STATUS = 0 
				BEGIN 

					INSERT INTO @AuthorsOfBook SELECT ( @AuthorName ) 
					 
					-- Inner Fetch 
					FETCH NEXT FROM AuthorCursor 
					INTO @AuthorName
				END
			
	CLOSE AuthorCursor DEALLOCATE AuthorCursor

	RETURN 

END

GO


-- dbo.getQuote
IF OBJECT_ID (N'dbo.getQuote', N'FN') IS NOT NULL
DROP FUNCTION dbo.getQuote;

GO

CREATE FUNCTION dbo.getQuote
       (
       @AuthorID smallint 
       )
RETURNS TABLE
AS
RETURN
(
	SELECT q.QuoteDescription 
	FROM Quote q
	JOIN Book b ON b.BookID = q.BookID
	JOIN BookAuthor ba ON ba.BookID = b.BookID
	JOIN Author a ON a.AuthorID = ba.AuthorID
	WHERE a.AuthorID = @AuthorID
)
GO


-- dbo.calculateCost
IF OBJECT_ID (N'dbo.calculateCost', N'FN') IS NOT NULL
DROP FUNCTION dbo.calculateCost;

GO

CREATE FUNCTION dbo.calculateCost
       (
       @RentalID smallint 
       )
RETURNS smallmoney
AS
BEGIN
	DECLARE @Total smallmoney
	DECLARE @Cost smallmoney
	DECLARE @BookID smallint
	DECLARE @Nights tinyint
	DECLARE @LateFee smallmoney
	DECLARE @Tax decimal(6,4)

	SET @Tax = (SELECT t.SalesTaxRate FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT tr.SalesTaxRate, h.HotelID FROM TaxRate tr JOIN Hotel h ON h.TaxLocationID = tr.TaxLocationID') t WHERE t.HotelID = 2100)

	SET @BookID = (SELECT BookID FROM Rental WHERE RentalID = @RentalID)
	SET @Cost = (SELECT BookCost FROM Book WHERE BookID = @BookID)
	SET @Nights = (SELECT RentalNights FROM Rental WHERE RentalID = @RentalID)
	SET @LateFee = 0
	
	IF DATEDIFF(day,DATEADD(day,5,(SELECT RentalCheckOut FROM Rental WHERE RentalID = @RentalID)) , (SELECT RentalCheckIn FROM Rental WHERE RentalID = @RentalID)) > 0
		BEGIN
			SET @LateFee = 5
		END
	
	SET @Total = ROUND(((@Cost*@Nights) + @LateFee) + (((@Cost*@Nights) + @LateFee) * (@Tax/100)),2)

	RETURN @Total
END


-- Inserts
GO

INSERT INTO Author(AuthorName, AuthorEmail) VALUES('Ian Suddreth', 'iansuddreth@mail.weber.edu')

INSERT INTO Author(AuthorName) VALUES('George R.R. Martin'),('Wilson Rawls'),('Steven Brust')
									,('Patrik Rothfuss'),('Andrzej Sapkowski'),('Scott Lynch'),('C.J. Cherryh'),('Jack London')
									,('Naomi Novik'),('Robin Hobb'),('J.K. Rowling'),('John Tiffany'),('Jack Thorne ');

INSERT INTO Publisher(PublisherName) VALUES ('Bantam'), ('Ace'), ('DAW'), ('Bantam Spectra')
						,('Del Rey'), ('Scholastic Paperbacks'), ('Gollancz'), ('Yearling'), ('Little Brown UK');

INSERT INTO Shelf(HotelID, ShelfName, ShelfLocation) VALUES (2100,'Main','Front Desk')
INSERT INTO Shelf(HotelID, ShelfName, ShelfLocation) VALUES (2200,'Main','Front Desk')
INSERT INTO Shelf(HotelID, ShelfName, ShelfLocation) VALUES (2300,'Main','Front Desk')
INSERT INTO Shelf(HotelID, ShelfName, ShelfLocation) VALUES (2400,'Main','Front Desk')

-- Inserting Books requires sp_InsertBook to be loaded
--Shelf 1 Books
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'A Game of Thrones', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'A Clash of Kings', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'A Storm of Swords', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'A Feast for Crows', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'A Dance with Dragons', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 1, @BookName = 'The Winds of Winter', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 8, @ShelfID = 1, @BookName = 'Where the Red Fern Grows', @AuthorName = 'Wilson Rawls'
EXEC sp_InsertBook @PublisherID = 2, @ShelfID = 1, @BookName = 'The Book of Jhereg', @AuthorName = 'Steven Brust'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 1, @BookName = 'The Name of the Wind', @AuthorName = 'Patrik Rothfuss'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 1, @BookName = 'The Wise Man''s Fear', @AuthorName = 'Patrik Rothfuss'

EXEC sp_InsertBook3 @PublisherID = 9, @ShelfID = 1, @BookName = 'Harry Potter and the Cursed Child', @FirstAuthorName = 'J.K. Rowling', @SecondAuthorName = 'John Tiffany', @ThirdAuthorName = 'Jack Throne'


--Shelf 2 Books
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'A Game of Thrones', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'A Clash of Kings', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'A Storm of Swords', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'A Feast for Crows', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'A Dance with Dragons', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 2, @BookName = 'The Winds of Winter', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 8, @ShelfID = 2, @BookName = 'Where the Red Fern Grows', @AuthorName = 'Wilson Rawls'
EXEC sp_InsertBook @PublisherID = 2, @ShelfID = 2, @BookName = 'The Book of Jhereg', @AuthorName = 'Steven Brust'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 2, @BookName = 'The Name of the Wind', @AuthorName = 'Patrik Rothfuss'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 2, @BookName = 'The Wise Man''s Fear', @AuthorName = 'Patrik Rothfuss'

--Shelf 3 Books
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'A Game of Thrones', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'A Clash of Kings', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'A Storm of Swords', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'A Feast for Crows', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'A Dance with Dragons', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 3, @BookName = 'The Winds of Winter', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 8, @ShelfID = 3, @BookName = 'Where the Red Fern Grows', @AuthorName = 'Wilson Rawls'
EXEC sp_InsertBook @PublisherID = 2, @ShelfID = 3, @BookName = 'The Book of Jhereg', @AuthorName = 'Steven Brust'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 3, @BookName = 'The Name of the Wind', @AuthorName = 'Patrik Rothfuss'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 3, @BookName = 'The Wise Man''s Fear', @AuthorName = 'Patrik Rothfuss'

----Shelf 4 Books
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'A Game of Thrones', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'A Clash of Kings', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'A Storm of Swords', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'A Feast for Crows', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'A Dance with Dragons', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 1, @ShelfID = 4, @BookName = 'The Winds of Winter', @AuthorName = 'George R.R. Martin'
EXEC sp_InsertBook @PublisherID = 8, @ShelfID = 4, @BookName = 'Where the Red Fern Grows', @AuthorName = 'Wilson Rawls'
EXEC sp_InsertBook @PublisherID = 2, @ShelfID = 4, @BookName = 'The Book of Jhereg', @AuthorName = 'Steven Brust'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 4, @BookName = 'The Name of the Wind', @AuthorName = 'Patrik Rothfuss'
EXEC sp_InsertBook @PublisherID = 3, @ShelfID = 4, @BookName = 'The Wise Man''s Fear', @AuthorName = 'Patrik Rothfuss'



--Rental




--Quotes
INSERT INTO Quote(BookID, QuoteDescription) VALUES (1,'... a mind needs books as a sword needs a whetstone, if it is to keep its edge.')
INSERT INTO Quote(BookID, QuoteDescription) VALUES (1,'Never forget what you are, for surely the world will not. Make it your strength. Then it can never be your weakness. Armour yourself in it, and it will never be used to hurt you.')
INSERT INTO Quote(BookID, QuoteDescription) VALUES (1,'Bran thought about it. ''Can a man still be brave if he''s afraid?''That is the only time a man can be brave,'' his father told him.')
INSERT INTO Quote(BookID, QuoteDescription) VALUES (1,'Fear cuts deeper than swords.')
INSERT INTO Quote(BookID, QuoteDescription) VALUES (1,'Some old wounds never truly heal, and bleed again at the slightest word.')


--


--

GO

--SELECT * FROM Author
--SELECT * FROM Publisher
--SELECT * FROM Shelf
--SELECT * FROM Book
--SELECT * FROM BookAuthor
--SELECT * FROM Rental
--SELECT * FROM Quote

--SELECT *  FROM dbo.showCheckedOut(2100) 

--SELECT *  FROM dbo.printAuthors(11) 

--SELECT * FROM dbo.getQuote(2)


INSERT INTO Rental(BookID,FolioID,RentalCheckOut,RentalNights,RentalStatus) VALUES (1,1,'8/1/2016',5,'A')

--SELECT dbo.calculateCost(1)

--INTO Rental(BookID,FolioID,RentalCheckOut,RentalCheckIn,RentalNights,RentalStatus) VALUES (1,1,'8/1/2016','8/5/2016',5,'A')

--SELECT dbo.calculateCost(2)

--UPDATE Rental SET RentalCheckIn = '8/5/2016' WHERE RentalID = 1


--SELECT t.* FROM OPENQUERY (TITAN_SUDDRETH, 'SELECT * FROM Hotel') t
--JOIN (SELECT HotelID FROM Shelf) s
--ON t.HotelID = s.HotelID

EXEC sp_UpdateRental
    @RentalID=1
  , @RentalCheckIn ='8/5/2016'

--EXEC sp_GetAuthor
--	@PublisherID = 1

--SELECT * FROM Book WHERE ShelfID = 1
